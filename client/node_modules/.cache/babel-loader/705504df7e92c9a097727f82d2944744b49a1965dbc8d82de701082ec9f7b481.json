{"ast":null,"code":"var _jsxFileName = \"/Users/joymondal/Documents/Learn/ReactProjects/react-blog/client/src/components/singlePost/SinglePost.js\",\n  _s = $RefreshSig$();\nimport { useLocation } from \"react-router-dom\";\nimport \"./singlePost.css\";\nimport { useEffect, useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { Context } from \"../../context/Context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SinglePost() {\n  _s();\n  const loc = useLocation();\n  const pathId = loc.pathname.split(\"/\")[2]; //used 'pathId' instead of just 'path'\n  const [post, setPost] = useState({});\n  const PF = \"http://localhost:5000/images/\"; // Pubic Folder for Photos\n  const {\n    user\n  } = useContext(Context); //for checking logged in username\n  const [title, setTitle] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const [updateMode, setUpdateMode] = useState(false);\n  useEffect(() => {\n    const getPost = async () => {\n      const res = await axios.get(\"/posts/\" + pathId); // get() req always returns a Response Type\n      console.log(res.data);\n      setPost(res.data);\n      setTitle(res.data.title);\n      setDe;\n    };\n    let data = getPost();\n    console.log(data);\n  }, [pathId]);\n  const handleDelete = async () => {\n    try {\n      var result = window.confirm(\"Are you sure that you want to Delete? \"); // for confirmation before delete\n      if (result) {\n        await axios.delete(`/posts/${post._id}`, {\n          data: {\n            username: user.username\n          }\n        });\n        window.location.replace(\"/\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"singlePost\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"singlePostWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"singlePostImg\",\n        src: PF + post.photo,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), updateMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: post.title,\n        className: \"singlePostTitleInput\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"singlePostTitle\",\n        children: [post.title,\n        // the user only can edit or update the post - 1. Check the \"username of post\" and \"logged in username\"- context API\n        post.username === (user === null || user === void 0 ? void 0 : user.username) &&\n        /*#__PURE__*/\n        // ?. optional chaing - if there's no user, not gonna bother about .username\n        _jsxDEV(\"div\", {\n          className: \"singlePostEdit\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"singlePostIcon far fa-edit\",\n            onClick: () => setUpdateMode(true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"singlePostIcon far fa-trash-alt\",\n            onClick: handleDelete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"singlePostInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Author:\", /*#__PURE__*/_jsxDEV(Link, {\n            to: `/?user=${post.username}`,\n            className: \"link\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              className: \"singlePostAuthor\",\n              children: post.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: new Date(post.createdAt).toDateString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), updateMode ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"singlePostDescInput\",\n        value: desc,\n        onChange: e => {\n          setDesc(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this) //{post.desc} ==> {desc} new variable\n      : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"singlePostDesc\",\n        children: [post.desc, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(SinglePost, \"iyxhMaVBldYi3hJFmrfbj2bLPVY=\", false, function () {\n  return [useLocation];\n});\n_c = SinglePost;\nexport default SinglePost;\nvar _c;\n$RefreshReg$(_c, \"SinglePost\");","map":{"version":3,"names":["useLocation","useEffect","useState","useContext","axios","Link","Context","jsxDEV","_jsxDEV","SinglePost","_s","loc","pathId","pathname","split","post","setPost","PF","user","title","setTitle","desc","setDesc","updateMode","setUpdateMode","getPost","res","get","console","log","data","setDe","handleDelete","result","window","confirm","delete","_id","username","location","replace","error","className","children","src","photo","alt","fileName","_jsxFileName","lineNumber","columnNumber","type","value","autoFocus","onClick","to","Date","createdAt","toDateString","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/joymondal/Documents/Learn/ReactProjects/react-blog/client/src/components/singlePost/SinglePost.js"],"sourcesContent":["import { useLocation } from \"react-router-dom\";\nimport \"./singlePost.css\";\nimport { useEffect, useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { Context } from \"../../context/Context\";\n\nfunction SinglePost() {\n  const loc = useLocation();\n  const pathId = loc.pathname.split(\"/\")[2]; //used 'pathId' instead of just 'path'\n  const [post, setPost] = useState({});\n  const PF = \"http://localhost:5000/images/\"; // Pubic Folder for Photos\n  const { user } = useContext(Context); //for checking logged in username\n  const [title, setTitle] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const [updateMode, setUpdateMode] = useState(false);\n\n  useEffect(() => {\n    const getPost = async () => {\n      const res = await axios.get(\"/posts/\" + pathId); // get() req always returns a Response Type\n      console.log(res.data);\n      setPost(res.data);\n      setTitle(res.data.title)\n      setDe\n    };\n    let data = getPost();\n    console.log(data);\n  }, [pathId]);\n\n  const handleDelete = async () => {\n    try {\n      var result = window.confirm(\"Are you sure that you want to Delete? \"); // for confirmation before delete\n      if (result) {\n        await axios.delete(`/posts/${post._id}`, {\n          data: { username: user.username },\n        });\n        window.location.replace(\"/\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return (\n    <div className=\"singlePost\">\n      <div className=\"singlePostWrapper\">\n        <img className=\"singlePostImg\" src={PF + post.photo} alt=\"\" />\n        {updateMode ? (\n          <input\n            type=\"text\"\n            value={post.title}\n            className=\"singlePostTitleInput\"\n            autoFocus\n          />\n        ) : (\n          <h1 className=\"singlePostTitle\">\n            {post.title}\n            {\n              // the user only can edit or update the post - 1. Check the \"username of post\" and \"logged in username\"- context API\n              post.username === user?.username && ( // ?. optional chaing - if there's no user, not gonna bother about .username\n                <div className=\"singlePostEdit\">\n                  <i\n                    className=\"singlePostIcon far fa-edit\"\n                    onClick={() => setUpdateMode(true)}\n                  ></i>\n                  <i\n                    className=\"singlePostIcon far fa-trash-alt\"\n                    onClick={handleDelete}\n                  ></i>\n                </div>\n              )\n            }\n          </h1>\n        )}\n        <div className=\"singlePostInfo\">\n          <span>\n            Author:\n            <Link to={`/?user=${post.username}`} className=\"link\">\n              <b className=\"singlePostAuthor\">{post.username}</b>\n            </Link>\n          </span>\n          <span>{new Date(post.createdAt).toDateString()}</span>\n        </div>\n        {updateMode ? (\n          <textarea className=\"singlePostDescInput\" value={desc} onChange={(e)=>{setDesc(e.target.value)}}/> //{post.desc} ==> {desc} new variable\n        ) : (\n          <p className=\"singlePostDesc\">{post.desc} </p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default SinglePost;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}